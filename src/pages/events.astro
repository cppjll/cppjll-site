---
import EventCard from "../components/EventCard.astro";
import Layout from "../layouts/Layout.astro";
import { directus } from "@/lib/directus";
import { readItems } from "@directus/sdk";
import { DateTime } from "luxon";

// TODO: Add pagination
import SemesterSelector from "@/components/SemesterSelector";
import PreviousEventsRenderer from "@/components/PreviousEventsRenderer";

const events = await directus.request(
  readItems("events", {
    fields: ["*"],
    sort: ["-start_datetime"],
    filter: import.meta.env.DEV // Only show published events in prod. Drafted events can be previewed in localhost.
      ? { status: { _in: ["draft", "published"] } }
      : { status: "published" },
  })
);

const upcomingEvents = events.filter(
  (event) =>
    DateTime.fromISO(event.end_datetime, {
      zone: "America/Los_Angeles",
    }).toUTC() > DateTime.now().toUTC()
);

const semesters = [
  {
    name: "Spring 2025",
    value: "Spring2025",
  },
  {
    name: "Fall 2024",
    value: "Fall2024",
  },
  {
    name: "Spring 2024",
    value: "Spring2024",
  },
  {
    name: "Fall 2023",
    value: "Fall2023",
  },
];

const eventsBySemester: Record<string, any[]> = {};
for (const semester of semesters) {
  eventsBySemester[semester.value] = events.filter(
    (event) => event.semester === semester.value
  );
}

console.log(eventsBySemester);
---

<Layout title="Events - CPP Japanese Language Learners">
  <div class="mb-16 md:max-w-4xl px-4 mx-6 md:mx-auto flex flex-col">
    <!-- Events -->
    <div class="flex flex-col">
      <div class="breadcrumbs my-4">
        <ul>
          <li><a href="/">Home</a></li>
          <li>Events</li>
        </ul>
      </div>
      <h1 class="text-5xl font-bold mb-4 font-display">Upcoming Events</h1>
      <!-- No upcoming events case -->
      <div class=`${upcomingEvents.length === 0 ? "flex flex-col" : "hidden"}`>
        <h2 class="mb-4">No upcoming events. Stay tuned! ٩(๑´∀ `๑ )</h2>
      </div>
      <!-- Render upcoming events in a single column on smaller devices -->
      <div
        class={`${upcomingEvents.length != 0 ? "flex flex-col items-center" : "hidden"} sm:hidden`}
      >
        {upcomingEvents.map((event) => <EventCard event={event} eager />)}
      </div>
      <!-- One upcoming event case -->
      {
        upcomingEvents.length === 1 && (
          <div class={`hidden sm:flex flex-col items-center`}>
            <EventCard event={upcomingEvents[0]} soonest eager />
          </div>
        )
      }
      <!-- Multiple upcoming events case -->
      {
        upcomingEvents.length > 1 && (
          <div class={`hidden sm:grid grid-cols-2 gap-4`}>
            {upcomingEvents
              .map((event) => <EventCard event={event} eager />)
              .reverse()}
          </div>
        )
      }
    </div>
    <!-- Previous Events -->
    <div class="flex flex-col my-6">
      <h1 class="text-5xl font-bold mb-4 font-display">Previous Events</h1>
      <SemesterSelector semesters={semesters} client:load />
      <div class="flex">
        {
          semesters.map((semester) => (
            <div
              id={`events-${semester.value}`}
              class={`events grid grid-cols-1 sm:grid-cols-2 gap-4 my-6`}
              style={`display: ${semester.value === semesters[0].value ? "grid" : "none"}`}
            >
              <PreviousEventsRenderer
                events={eventsBySemester[semester.value]}
              />
            </div>
          ))
        }
      </div>
    </div>
  </div>
</Layout>
